import React, { useState, useEffect } from 'react';
import L, { LatLngExpression } from 'leaflet';
import 'leaflet/dist/leaflet.css';

// Définir le type pour la méthode fromEncoded
declare module 'leaflet' {
    namespace Polyline {
        function fromEncoded(encoded: string, options?: PolylineOptions): Polyline;
    }
}

const MapComponent: React.FC = () => {
    const [map, setMap] = useState<L.Map | null>(null);
    const [startPointMarker, setStartPointMarker] = useState<L.Marker | null>(null);
    const [endPointMarker, setEndPointMarker] = useState<L.Marker | null>(null);
    const [routePolyline, setRoutePolyline] = useState<L.Polyline | null>(null);

    useEffect(() => {
        const map = L.map('map').setView([33.57613, -7.63666] as LatLngExpression, 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);
        setMap(map);

        map.on('click', handleClick);

        return () => {
            map.off('click', handleClick);
        };
    }, []);

    const handleClick = (e: L.LeafletMouseEvent) => {
        const latlng = e.latlng;
        if (!startPointMarker) {
            const marker = L.marker(latlng).addTo(map as L.Map);
            setStartPointMarker(marker);
            const startInput = document.getElementById('start') as HTMLInputElement | null;
            if (startInput) startInput.value = `${latlng.lat}, ${latlng.lng}`;
        } else if (!endPointMarker) {
            const marker = L.marker(latlng).addTo(map as L.Map);
            setEndPointMarker(marker);
            const endInput = document.getElementById('end') as HTMLInputElement | null;
            if (endInput) endInput.value = `${latlng.lat}, ${latlng.lng}`;
        }
    };

    const getCurrentLocation = () => {
        map?.locate({ setView: true, maxZoom: 16 });
    };

    const calculateRoute = () => {
        const startInput = document.getElementById('start') as HTMLInputElement | null;
        const endInput = document.getElementById('end') as HTMLInputElement | null;

        if (startInput && endInput) {
            const startPoint = startInput.value;
            const endPoint = endInput.value;

            // Vous devez implémenter la logique de calcul de l'itinéraire ici
            console.log('Calculating route...');
        }
    };

    return (
        <div>
            <div id="map" style={{ height: '400px' }}></div>
            <div>
                <label htmlFor="start">Start point:</label>
                <input type="text" id="start" name="start" />
            </div>
            <div>
                <label htmlFor="end">End point:</label>
                <input type="text" id="end" name="end" />
            </div>
            <button onClick={calculateRoute}>Calculate Route</button>
            <button onClick={getCurrentLocation}>Current Location</button>
        </div>
    );
};

export default MapComponent;
